Linked list - Delete second last 1
Write a Program to delete the second last element from the list. If deletion of second last element is not possible, print "Deletion of second last element is not possible", Otherwise print the list after deleting the second last element.

Input Format

Read elements upto -1

Constraints

1<=n<=10^7

Output Format

print output

Sample Input 0

1
2
3
4
-1
Sample Output 0

Before deleting:
1 2 3 4
After deleting:
1 2 4
Sample Input 1

23
34
55
12
66
45
33
-1
Sample Output 1

Before deleting:
23 34 55 12 66 45 33
After deleting:
23 34 55 12 66 33

CODE:
class Node:
    def __init__(self,x):
        self.data=x
        self.next=None
class singlelinkedlist:
    def __init__(self):
        self.head=self.tail=None
    def create(self,data):
        n=Node(x)
        if self.head==None:
            self.head=self.tail=n
        else:
            self.tail.next=n
            self.tail=n
    def show(self):
        if self.head==None:
            print("list is empty")
            return
        temp=self.head
        while temp!=None:
            if temp.next.next.next!=None:
                temp=temp.next
            else:
                break
        temp.next=self.tail
    def sow(self):
        temp=self.head
        while temp!=None:
            print(temp.data,end=" ")
            temp=temp.next
            
s1=singlelinkedlist()
while True:
    x=int(input())
    if x==-1:
        break
    else:
        s1.create(x)
print("Before deleting:")
s1.sow()
print("\nAfter deleting:")
s1.show()
s1.sow()
